# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AreaDialog
                                 A QGIS plugin
 Calculates the area of selected polygon
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from .psql import *
import psycopg2
import os
import qgis.utils
import qgis

from PyQt5.QtGui import QColor
from PyQt5 import QtCore
from PyQt5.QtCore import QPointF, Qt
from qgis.PyQt import uic, QtWidgets

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsGeometry,
    QgsSingleSymbolRenderer,
    QgsFillSymbol,
    QgsPalLayerSettings,
    QgsVectorLayerSimpleLabeling,
    QgsTextFormat,
    QgsTextBufferSettings,
    QgsPointXY,
    QgsAnnotation,
    QgsRectangle,
    QgsCoordinateReferenceSystem,
    QgsTextAnnotation,
    QgsSpatialIndex,
    QgsRuleBasedRenderer
)
from qgis.gui import QgsMapCanvasAnnotationItem
from qgis.gui import QgsMapToolEmitPoint
from PyQt5.QtGui import QColor, QTextDocument
from PyQt5.QtCore import QSizeF, QPointF
from PyQt5.QtWidgets import QMenu

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'area_dialog_base.ui'))


class AreaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(AreaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.ok_button.accepted.connect(self.ok_clicked)
        self.iface = iface
        self.tool = QgsMapToolEmitPoint(self.iface.mapCanvas())
        self.tool.canvasClicked.connect(self.calculate_area)
        self.annotations = []
        
    def ok_clicked(self):
        if self.annotations:
            self.close()
        print("ok clicked")
        village = self.village_in.text()
        map = self.map_in.text()
        layer = QgsVectorLayer(
                    f"dbname='{psql['database']}' host={psql['host']} port={psql['port']} user='{psql['user']}' password='{psql['password']}' sslmode=disable key='unique_id' srid=32643 type=Polygon table=\"{village}\".\"{map}\" (geom)",
                    f"{village}.{map}_areas",
                    "postgres"
                )
        
        if not layer.isValid():
            print("Layer failed to load!")
        else:
            QgsProject.instance().addMapLayer(layer)
            
        self.layer = layer
        self.layer.willBeDeleted.connect(self.clear_annotations)
        QgsProject.instance().layerWillBeRemoved.connect(self.layer_removed)
        self.iface.mapCanvas().setMapTool(self.tool)
    
    def calculate_area(self, point, button):
        features = self.layer.getFeatures()
        canvas = self.iface.mapCanvas()

        for featuree in features:
            if featuree.geometry().contains(point):
                feature = featuree
                break
        
        if button == Qt.RightButton:
            for annotation in self.annotations:
                if annotation.annotation().mapPosition() == feature.geometry().centroid().asPoint():
                    canvas.scene().removeItem(annotation)
                    self.annotations.remove(annotation)
                    self.layer.deselect(feature.id())
                    break            

        else :
            area = feature.geometry().area()
            print(f"Area: {area}")
            self.layer.select(feature.id())
            geom = feature.geometry()
            point = geom.centroid().asPoint()
            area = round(area, 2)
            html = f"<h1>Area: {area}sqm</h1>"
            a = QgsTextAnnotation()
            c = QTextDocument()

            c.setHtml(html)
            a.setDocument(c)

            a.setFrameSize(QSizeF(150, 50))
            a.setMapLayer(self.layer)
            a.setFrameOffsetFromReferencePoint(QtCore.QPointF(30, 30))
            a.setMapPosition(point)
            a.setMapPositionCrs(QgsCoordinateReferenceSystem(self.layer.crs()))
            
            i = QgsMapCanvasAnnotationItem(a, canvas)
            self.annotations.append(i)

     
    def clear_annotations(self):
        for annotation in self.annotations:
            self.iface.mapCanvas().scene().removeItem(annotation)
        self.annotations = []

    def layer_removed(self, layerId):
        if self.layer and self.layer.id() == layerId:
            self.clear_annotations()
            self.layer = None

    def close(self):
        self.clear_annotations()
        self.annotations = []