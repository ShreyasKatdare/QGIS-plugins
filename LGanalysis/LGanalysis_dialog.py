# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LGanalysisDialog
                                 A QGIS plugin
 Heatmap analysis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from .psql import *

import psycopg2
import os
import qgis.utils
import qgis

from PyQt5.QtGui import QColor
from PyQt5 import QtCore
from PyQt5.QtCore import QPointF, Qt
from qgis.PyQt import uic, QtWidgets

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsSymbol,
    QgsRendererRange,
    QgsGraduatedSymbolRenderer,
    QgsFeature,
    QgsGeometry,
    QgsSingleSymbolRenderer,
    QgsFillSymbol,
    QgsExpression,
    QgsPalLayerSettings,
    QgsVectorLayerSimpleLabeling,
    QgsTextFormat,
    QgsTextBufferSettings,
    QgsPointXY,
    QgsAnnotation,
    QgsCoordinateReferenceSystem,
    QgsTextAnnotation,
    QgsRuleBasedRenderer
)
from qgis.gui import QgsMapCanvasAnnotationItem
from qgis.gui import QgsMapToolEmitPoint
from PyQt5.QtGui import QColor, QTextDocument, QFont
from PyQt5.QtCore import QSizeF, QPointF
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QCheckBox, QDockWidget, QWidget, QFormLayout, QLabel, QPushButton, QLineEdit

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'LGanalysis_dialog_base.ui'))


class LGanalysisDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(LGanalysisDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        # self.heatmap_toggle = None
        # self.ok_button.accepted.connect(self.load_maps)
        self.showButton.clicked.connect(self.showMore)
        self.ishide = True
        
        self.lineEdit_farmplots.hide()
        self.lineEdit_host.hide()
        self.lineEdit_port.hide()
        self.lineEdit_user.hide()
        self.lineEdit_database.hide()
        self.lineEdit_password.hide()
        self.lineEdit_survey_georef.hide()
        self.lineEdit_jitter_spline.hide()
        self.lineEdit_jitter_polygon.hide()

        self.label.hide()
        self.label_2.hide()
        self.label_4.hide()
        self.label_5.hide()
        self.label_6.hide()
        self.label_7.hide()
        self.label_8.hide()
        self.label_9.hide()
        self.label_10.hide()
        self.label_11.hide()
        self.label_13.hide()
        self.label_14.hide()
        self.label_15.hide()
        self.label_16.hide()
        self.label_17.hide()
        self.label_18.hide()
        self.label_19.hide()
        self.label_20.hide()
        self.label_21.hide()
        self.label_22.hide()
        self.label_23.hide() 
        
        
    def showMore(self):
        if self.ishide:
            self.lineEdit_farmplots.show()
            self.lineEdit_host.show()
            self.lineEdit_port.show()
            self.lineEdit_user.show()
            self.lineEdit_database.show()
            self.lineEdit_password.show()
            self.lineEdit_survey_georef.show()
            self.lineEdit_jitter_spline.show()
            self.lineEdit_jitter_polygon.show()

            self.label.show()
            self.label_2.show()
            self.label_4.show()
            self.label_5.show()
            self.label_6.show()
            self.label_7.show()
            self.label_8.show()
            self.label_9.show()
            self.label_10.show()
            self.label_11.show()
            self.label_13.show()
            self.label_14.show()
            self.label_15.show()
            self.label_16.show()
            self.label_17.show()
            self.label_18.show()
            self.label_19.show()
            self.label_20.show()
            self.label_21.show()
            self.label_22.show()
            self.label_23.show()            
            self.ishide = False
        else:
            self.lineEdit_farmplots.hide()
            self.lineEdit_host.hide()
            self.lineEdit_port.hide()
            self.lineEdit_user.hide()
            self.lineEdit_database.hide()
            self.lineEdit_password.hide()
            self.lineEdit_survey_georef.hide()
            self.lineEdit_jitter_spline.hide()
            self.lineEdit_jitter_polygon.hide()

            self.label.hide()
            self.label_2.hide()
            self.label_4.hide()
            self.label_5.hide()
            self.label_6.hide()
            self.label_7.hide()
            self.label_8.hide()
            self.label_9.hide()
            self.label_10.hide()
            self.label_11.hide()
            self.label_13.hide()
            self.label_14.hide()
            self.label_15.hide()
            self.label_16.hide()
            self.label_17.hide()
            self.label_18.hide()
            self.label_19.hide()
            self.label_20.hide()
            self.label_21.hide()
            self.label_22.hide()
            self.label_23.hide()            
            self.ishide = True
    
    
class HeatMapToggle(QDockWidget):
    def __init__(self, parent=None, grandpa=None):
        super(HeatMapToggle, self).__init__(parent)
        self.grandpa = grandpa
        self.num_heatmaps = 2
        self.ranges = {}
        self.fields = {}
        self.label = QtWidgets.QLabel("Generate heatmap")
        
        self.checkbox1 = QCheckBox("Farm rating heatmap")
        self.checkbox2 = QCheckBox("Actual area difference heatmap")
        self.checkbox1.stateChanged.connect(self.on_checkbox1_state_changed)
        self.checkbox2.stateChanged.connect(self.on_checkbox2_state_changed)
        self.new_heatmap_pbutton = QPushButton("Add Custom Heatmap")
        self.new_heatmap_pbutton.clicked.connect(self.add_custom_heatmap)
        
        
        self.label.setFont(QFont("Helvetica", 20))
        self.checkbox1.setFont(QFont("Helvetica", 15))
        self.checkbox2.setFont(QFont("Helvetica", 15))
        
        self.new_layout = QFormLayout()
        self.new_layout.addRow(self.label)
        self.new_layout.addRow(self.checkbox1)
        self.new_layout.addRow(self.checkbox2)
        self.new_layout.addRow(self.new_heatmap_pbutton)

        widget = QWidget()
        widget.setLayout(self.new_layout)
        self.setWidget(widget)
        
        
    def on_checkbox1_state_changed(self, state):
        if state == Qt.Checked:
            if self.checkbox2.isChecked():
                self.checkbox2.setChecked(False)
            self.grandpa.generate_heatmap("farm_rating")
        else:
            self.grandpa.remove_heatmap()
            
    def on_checkbox2_state_changed(self, state):
        if state == Qt.Checked:
            if self.checkbox1.isChecked():
                self.checkbox1.setChecked(False)
            self.grandpa.generate_heatmap("actual_area_diff")
        else:
            self.grandpa.remove_heatmap()
            
    def add_custom_heatmap(self):
        field_label = QLabel("Field name")
        line_edit = QLineEdit()
        self.new_layout.addRow(field_label, line_edit)
        label2 = QLabel("select ranges")
        label3 = QLabel("to")
        box1 = QLineEdit()
        box2 = QLineEdit()
        hbox = QHBoxLayout()
        hbox.addWidget(box1)
        hbox.addWidget(label3)
        hbox.addWidget(box2)
        
        self.pushadd = QPushButton("Add")
        self.pushgen = QPushButton("Generate")
        self.new_layout.addRow(label2)
        self.new_layout.addRow(hbox)
        self.new_layout.addRow(self.pushadd, self.pushgen)
        self.pushadd.clicked.connect(self.add_range)
        self.pushgen.clicked.connect(self.generate_custom_heatmap)
        
    def add_range(self):
        count = self.new_layout.rowCount()
        label3 = QLabel("to")
        box1 = QLineEdit()
        box2 = QLineEdit()
        hbox = QHBoxLayout()
        hbox.addWidget(box1)
        hbox.addWidget(label3)
        hbox.addWidget(box2)
        self.new_layout.insertRow(count -1, hbox)
        

    def generate_custom_heatmap(self):
        self.num_heatmaps += 1
        self.fields[self.num_heatmaps] = f"{self.new_layout.itemAt(self.num_heatmaps + 1, QFormLayout.FieldRole).widget().text()}"
        checkbox = QCheckBox(f"{self.new_layout.itemAt(self.num_heatmaps + 1, QFormLayout.FieldRole).widget().text()} (Custom heatmap)")
        checkbox.setFont(QFont("Helvetica", 15))
        checkbox.stateChanged.connect(lambda state, num=self.num_heatmaps: self.foo(state, num))
        self.new_layout.insertRow(3, checkbox)
        
        count = self.new_layout.rowCount()
        
        self.ranges[self.num_heatmaps] = []
        for i in range(self.num_heatmaps + 4, count -1):
            hbox = self.new_layout.itemAt(i, QFormLayout.FieldRole).layout()
            range_start = float(hbox.itemAt(0).widget().text())
            range_end = float(hbox.itemAt(2).widget().text())

            self.ranges[self.num_heatmaps].append((range_start, range_end))
            
        print(self.ranges[self.num_heatmaps])
        i = self.num_heatmaps + 2
        while i < count:
            self.new_layout.removeRow(self.num_heatmaps + 2)
            i += 1
    
    def foo(self, state, num):
        if state == Qt.Checked:
            self.grandpa.generate_heatmap("custom", self.fields[num], self.ranges[num])
        else:
            self.grandpa.remove_heatmap()