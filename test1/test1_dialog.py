# -*- coding: utf-8 -*-
"""
/***************************************************************************
 test1Dialog
                                 A QGIS plugin
 test1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-13
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsVectorLayer, QgsProject
from PyQt5.QtGui import QColor
import psycopg2
import os
from .psql import *

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsSingleSymbolRenderer
from qgis.core import QgsFillSymbol
from qgis.core import QgsVectorLayerExporter
from qgis.core import QgsVectorFileWriter, QgsCoordinateTransformContext
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test1_dialog_base.ui'))


class test1Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(test1Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.comboBox.addItems(["red", "yellow", "green", "blue"])
        
        self.pbColor.clicked.connect(self.color)
        
        

    def color(self):
        selected_color = self.comboBox.currentText()
        village = self.village_in.text()
        map = self.map_in.text()
        
        layer = QgsVectorLayer(
                    f"dbname='{psql['database']}' host={psql['host']} port={psql['port']} user='{psql['user']}' password='{psql['password']}' sslmode=disable key='unique_id' srid=32643 type=Polygon table=\"{village}\".\"{map}\" (geom)",
                    f"{village}.{map}_colored",
                    "postgres"
                )
        
        symbol = QgsFillSymbol.createSimple({'color': selected_color})  # RGBA color

        renderer = QgsSingleSymbolRenderer(symbol)

        layer.setRenderer(renderer)

        layer.triggerRepaint()
        QgsProject.instance().addMapLayer(layer)
        self.save_layer_to_shapefile(layer, f"/home/shreyas/inter_safe/test_plugin_maps/{village}_{map}_colored.shp")
        
    def save_layer_to_shapefile(self, layer, filepath):
        error = QgsVectorFileWriter.writeAsVectorFormat(
            layer,
            filepath,
            'UTF-8',
            layer.crs(),
            'ESRI Shapefile'
        )
        if error == QgsVectorFileWriter.NoError:
            print("Layer successfully saved!")
        else:
            print(f"Error saving layer: {error}")