# -*- coding: utf-8 -*-
"""
/***************************************************************************
 new_heatmapDialog
                                 A QGIS plugin
 new_heatmap
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import numpy as np
import os

from qgis._gui import QgsMapMouseEvent


import psycopg2
import os
import qgis.utils
import qgis

from PyQt5.QtGui import QColor
from PyQt5 import QtCore
from PyQt5.QtCore import QPointF, Qt
from qgis.PyQt import uic, QtWidgets

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsSymbol,
    QgsRendererRange,
    QgsGraduatedSymbolRenderer,
    QgsFeature,
    QgsLineSymbol,
    QgsGeometry,
    QgsSingleSymbolRenderer,
    QgsFillSymbol,
    QgsWkbTypes,
    QgsFeatureRequest,
    QgsField,
    QgsPalLayerSettings,
    QgsVectorLayerSimpleLabeling,
    QgsTextFormat,
    QgsTextBufferSettings,
    QgsPointXY,
    QgsAnnotation,
    QgsCoordinateReferenceSystem,
    QgsTextAnnotation,
    QgsRuleBasedRenderer
)
from qgis.core import QgsVectorFileWriter, QgsDataSourceUri
from PyQt5.QtCore import pyqtSignal
from qgis.gui import QgsMapCanvasAnnotationItem, QgsMapToolEmitPoint, QgsRubberBand, QgsMapTool
from qgis.gui import QgsMapToolEmitPoint
from PyQt5.QtGui import QColor, QTextDocument, QFont
from PyQt5.QtCore import QSizeF, QPointF, Qt
from qgis.PyQt.QtCore import QVariant 
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QCheckBox, QDockWidget, QMessageBox, QAction, QFormLayout, QLabel, QPushButton, QRadioButton


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'new_heatmap_dialog_base.ui'))


class new_heatmapDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(new_heatmapDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.side_bar = None
        self.okbutton.accepted.connect(self.initiate)
        
    def initiate(self):
        if self.side_bar is None:
            self.side_bar = SideBar(self)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.side_bar)

    def generate_heatmap(self, field, method):
        print("generating heatmap")
        print(field, method)
        layer = self.iface.activeLayer()
        if method == 1:
            colors = [(0.0, QColor('#d7191c')), (0.8, QColor('#ffffc0')), (0.9, QColor('#1a9641')), (1.0, QColor('blue'))]

        else :
            colors = [(-100000, QColor('#ca0020')), (-0.05, QColor('#ec846e')), (-0.03, QColor('#f6d6c8')), (-0.01, QColor('#d3d3d3')), (0.01, QColor('#cfe3ed')), (0.03, QColor('#76b4d5')), (0.05, QColor('#0571b0')), (100000, QColor('blue'))]

        ranges = []
        for i in range(len(colors) - 1):
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(colors[i][1])
            rng = QgsRendererRange(colors[i][0], colors[i+1][0], symbol, f"{100*colors[i][0]} - {100*colors[i+1][0]}")
            ranges.append(rng)

        renderer = QgsGraduatedSymbolRenderer(field, ranges)
        layer.setRenderer(renderer)

        layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(layer.id())
        
    def remove_heatmap(self):
        print("removing heatmap")
        layer = self.iface.activeLayer()
        symbol = QgsFillSymbol.createSimple({'color': QColor(0,0,0,0), 'outline_color': QColor('#3579b1'), 'outline_width': '1'})
        layer.setRenderer(QgsSingleSymbolRenderer(symbol))
        layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(layer.id())
        
class SideBar(QDockWidget):
    def __init__(self, parent):
        super(SideBar, self).__init__(parent)
        self.parent = parent
        self.form_layout = QFormLayout()
        self.parent.iface.currentLayerChanged.connect(self.layer_changed)
        
        label3 = QLabel("Generate Heatmap")
        label3.setFont(QFont("Helvetica", 15))
        
        show_button = QPushButton("Show attributes")
        show_button.setFont(QFont("Helvetica", 15))
        show_button.clicked.connect(self.show_attributes)

    
        m1_heatmap = QCheckBox("heatmap method 1")
        m1_heatmap.setFont(QFont("Helvetica", 15))
        m1_heatmap.stateChanged.connect(self.m1_heatmap)

        m2_heatmap = QCheckBox("Heatmap method 2")
        m2_heatmap.setFont(QFont("Helvetica", 15))
        m2_heatmap.stateChanged.connect(self.m2_heatmap)
        
        self.form_layout.addRow(label3)
        self.form_layout.addRow(m1_heatmap)
        self.form_layout.addRow(m2_heatmap)
        self.form_layout.addRow(show_button)
        
        widget = QtWidgets.QWidget()
        widget.setLayout(self.form_layout)
        self.setWidget(widget)

    def show_attributes(self):
        layer = self.parent.iface.activeLayer()
        fields = layer.fields()
        buttons = {}
            
        for field in fields:
            buttons[field.name()] = QRadioButton(field.name())
            buttons[field.name()].setFont(QFont("Helvetica", 13))
            self.form_layout.addRow(buttons[field.name()])
            
        for button in buttons.values():
            button.toggled.connect(lambda state, button=button: self.select_attribute(button.text()) if state else None)
        
    def m1_heatmap(self, state):
        if state == Qt.Checked:
            self.parent.generate_heatmap(self.att, 1)
        else:
            self.parent.remove_heatmap()
            
    def m2_heatmap(self, state):
        if state == Qt.Checked:
            self.parent.generate_heatmap(self.att, 2)
        else:
            self.parent.remove_heatmap()

    def select_attribute(self, attribute):
        self.att = attribute
        
    def layer_changed(self):
        count = self.form_layout.rowCount()
        for i in range(count-1, 3, -1):
            self.form_layout.removeRow(i)