# -*- coding: utf-8 -*-
"""
/***************************************************************************
 heatmapDialog
                                 A QGIS plugin
 generates heatmap
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from .psql import *

import psycopg2
import os
import qgis.utils
import qgis

from PyQt5.QtGui import QColor
from PyQt5 import QtCore
from PyQt5.QtCore import QPointF, Qt
from qgis.PyQt import uic, QtWidgets

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsSymbol,
    QgsRendererRange,
    QgsGraduatedSymbolRenderer,
    QgsFeature,
    QgsGeometry,
    QgsSingleSymbolRenderer,
    QgsFillSymbol,
    QgsExpression,
    QgsPalLayerSettings,
    QgsVectorLayerSimpleLabeling,
    QgsTextFormat,
    QgsTextBufferSettings,
    QgsPointXY,
    QgsAnnotation,
    QgsCoordinateReferenceSystem,
    QgsTextAnnotation,
    QgsRuleBasedRenderer
)
from qgis.gui import QgsMapCanvasAnnotationItem
from qgis.gui import QgsMapToolEmitPoint
from PyQt5.QtGui import QColor, QTextDocument
from PyQt5.QtCore import QSizeF, QPointF
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QCheckBox, QDockWidget
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'heatmap_dialog_base.ui'))


class heatmapDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(heatmapDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.heatmap_toggle = None
        self.combo_attributes.addItems(["farm_rating", "excess_area", "actual_area_diff"])
        self.ok_button.accepted.connect(self.load_maps)
        QgsProject.instance().layersRemoved.connect(self.on_layers_removed)
        
    def load_maps(self):
        print("ok clicked")
        maps = ["survey_georeferenced", "jitter_spline_output_regularised_05", "shifted_faces"]
        village = self.village_in.text()        
        for map in maps:    
            layer = QgsVectorLayer(
                        f"dbname='{psql['database']}' host={psql['host']} port={psql['port']} user='{psql['user']}' password='{psql['password']}' sslmode=disable key='unique_id' srid=32643 type=Polygon table=\"{village}\".\"{map}\" (geom)",
                        f"{village}.{map}_colored",
                        "postgres"
                    )
        
            if not layer.isValid():
                print("Layer failed to load!")
            else:
                symbol = QgsFillSymbol.createSimple({'color' : 'orange'})
                renderer = QgsSingleSymbolRenderer(symbol)
                layer.setRenderer(renderer)
                layer.triggerRepaint()
                QgsProject.instance().addMapLayer(layer)
        if self.heatmap_toggle is None:    
            self.heatmap_toggle = HeatMapToggle(self, self)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.heatmap_toggle)
        else:
            self.heatmap_toggle.dialog = self
    
    def generate_heatmap(self):
        print("generating heatmap")
        self.layer = self.iface.activeLayer()
        field = self.combo_attributes.currentText()
        
        if field == "farm_rating":
            colors = [(0.0, QColor('red')), (0.8, QColor('yellow')), (0.9, QColor('green')), (1.0, QColor('blue'))]

        elif field == "excess_area":
            colors = [(0.0, QColor('green')), (0.01, QColor('yellow')), (0.1, QColor('red')), (100000 , QColor('blue'))]
        
        elif field == "actual_area_diff":
            colors = [(-100000, QColor('red')), (-0.1, QColor('yellow')), (-0.01, QColor('green')), (0.0, QColor('green')), (0.01, QColor('yellow')), (0.1, QColor('red')), (100000 , QColor('blue'))]
        ranges = []
        for i in range(len(colors) - 1):
            symbol = QgsSymbol.defaultSymbol(self.layer.geometryType())
            symbol.setColor(colors[i][1])
            rng = QgsRendererRange(colors[i][0], colors[i+1][0], symbol, f"{colors[i][0]} - {colors[i+1][0]}")
            ranges.append(rng)

        renderer = QgsGraduatedSymbolRenderer(field, ranges)
        self.layer.setRenderer(renderer)

        self.layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(self.layer.id())
        
    def remove_heatmap(self):
        self.layer = self.iface.activeLayer()
        symbol = QgsFillSymbol.createSimple({'color' : 'orange'})
        self.layer.setRenderer(QgsSingleSymbolRenderer(symbol))
        self.layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(self.layer.id())
        
    def on_layers_removed(self, layerIds):
        if len(QgsProject.instance().mapLayers()) == 0:
            if self.heatmap_toggle:
                self.iface.removeDockWidget(self.heatmap_toggle)
                self.heatmap_toggle.deleteLater()
                self.heatmap_toggle = None
        
class HeatMapToggle(QDockWidget):
    def __init__(self, parent=None, dialog=None):
        super(HeatMapToggle, self).__init__(parent)
        self.dialog = dialog
        self.checkbox = QCheckBox("Generate heatmap")
        self.checkbox.stateChanged.connect(self.on_checkbox_state_changed)

        self.setWidget(self.checkbox)

        
    def on_checkbox_state_changed(self, state):
        if state == Qt.Checked:
            self.dialog.generate_heatmap()
        else:
            self.dialog.remove_heatmap()