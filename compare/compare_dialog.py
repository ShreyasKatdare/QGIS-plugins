# -*- coding: utf-8 -*-
"""
/***************************************************************************
 compareDialog
                                 A QGIS plugin
 compare
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-21
        git sha              : $Format:%H$
        copyright            : (C) 2024 by sk
        email                : shreyas.08kat@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import numpy as np
import os


from qgis._gui import QgsMapMouseEvent
from .psql import *

import psycopg2
import os
import qgis.utils
import qgis

from PyQt5.QtGui import QColor
from PyQt5 import QtCore
from PyQt5.QtCore import QPointF, Qt
from qgis.PyQt import uic, QtWidgets

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsVectorLayerEditUtils,
    QgsSymbol,
    QgsRendererRange,
    QgsGraduatedSymbolRenderer,
    QgsFeature,
    QgsLineSymbol,
    QgsGeometry,
    QgsSingleSymbolRenderer,
    QgsFillSymbol,
    QgsWkbTypes,
    QgsFeatureRequest,
    QgsField,
    QgsPalLayerSettings,
    QgsVectorLayerSimpleLabeling,
    QgsTextFormat,
    QgsTextBufferSettings,
    QgsPointXY,
    QgsAnnotation,
    QgsCoordinateReferenceSystem,
    QgsTextAnnotation,
    QgsRuleBasedRenderer,
    QgsGradientColorRamp,
    QgsVectorLayerExporter,
    QgsProperty,
    QgsCategorizedSymbolRenderer, 
    QgsRendererCategory
)
from qgis.core import QgsVectorFileWriter, QgsDataSourceUri
from PyQt5.QtCore import pyqtSignal
from qgis.gui import QgsMapCanvasAnnotationItem, QgsMapToolEmitPoint, QgsRubberBand, QgsMapTool
from qgis.gui import QgsMapToolEmitPoint
from PyQt5.QtGui import QColor, QTextDocument, QFont
from PyQt5.QtCore import QSizeF, QPointF, Qt
from qgis.PyQt.QtCore import QVariant 
from PyQt5.QtWidgets import QSpacerItem ,QComboBox, QHBoxLayout ,QDialog, QVBoxLayout, QCheckBox, QDockWidget, QMessageBox, QAction, QFormLayout, QLabel, QPushButton, QRadioButton, QFileDialog


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'compare_dialog_base.ui'))


class compareDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(compareDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)



from PyQt5.QtWidgets import QDesktopWidget, QDialog, QScrollArea, QVBoxLayout, QWidget, QCheckBox, QDockWidget, QMessageBox, QAction, QFormLayout, QLabel, QPushButton, QRadioButton, QFileDialog
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt
from qgis.core import QgsVectorFileWriter

class SideBar(QDockWidget):
    def __init__(self, iface = None, parent = None ):
        super(SideBar, self).__init__(parent)
        self.iface = iface
        self.map1 = None
        self.map2 = None
        self.common_features = []
        self.canvas = self.iface.mapCanvas()
        self.psql_conn = PGConn()
        QgsProject.instance().layerWillBeRemoved.connect(self.on_remove_layer)
                
        screen = QDesktopWidget().screenGeometry()
        font_size = screen.height() // 50
        
        scroll = QScrollArea(self)
        self.setWidget(scroll)
        
        content_widget = QWidget()
        scroll.setWidget(content_widget)
        scroll.setWidgetResizable(True)
        
        self.form_layout = QFormLayout(content_widget)
        label1 = QLabel("Compare two maps")
        label1.setFont(QFont("Helvetica", font_size))

        select_1 = QPushButton("Select active layer\nas base map")
        select_2 = QPushButton("Select active layer\nas map to compare\nw.r.t base map")
        select_1.setFont(QFont("Helvetica", font_size - 5))
        select_2.setFont(QFont("Helvetica", font_size - 5))
        
        select_1.clicked.connect(self.select_first_map)
        select_2.clicked.connect(self.select_second_map)
        
        self.label_select_1 = QLabel("No map selected")
        self.label_select_2 = QLabel("No map selected")
        self.label_select_1.setFont(QFont("Helvetica", font_size - 5))
        self.label_select_2.setFont(QFont("Helvetica", font_size - 5))
        
        self.label_map_col = QLabel("Select column\nto map polygons")
        self.label_map_col.setFont(QFont("Helvetica", font_size - 5))
        self.combo_box_map = QComboBox()
        self.combo_box_map.setFont(QFont("Helvetica", font_size - 5))
        
        self.label_compare_col = QLabel("Select column\nto compare")
        self.label_compare_col.setFont(QFont("Helvetica", font_size - 5))
        self.combo_box_compare = QComboBox()
        self.combo_box_compare.setFont(QFont("Helvetica", font_size - 5))
        
        hbox1 = QHBoxLayout()
        hbox1.addWidget(select_1)
        hbox1.addWidget(self.label_select_1)
        
        hbox2 = QHBoxLayout()
        hbox2.addWidget(select_2)
        hbox2.addWidget(self.label_select_2)
        
        self.compare_button = QPushButton("Compare")
        self.compare_button.setFont(QFont("Helvetica", font_size - 5))
        self.compare_button.clicked.connect(self.compare)

        self.form_layout.addRow(label1)
        self.add_spacer_to_layout()
        self.form_layout.addRow(hbox1)
        self.add_spacer_to_layout()
        self.form_layout.addRow(hbox2)
        self.add_spacer_to_layout()
        self.form_layout.addRow(self.label_map_col, self.combo_box_map)
        self.add_spacer_to_layout()
        self.form_layout.addRow(self.label_compare_col, self.combo_box_compare)
        self.add_spacer_to_layout()
        self.form_layout.addRow(self.compare_button)
        
    def add_spacer_to_layout(self):
        vbox = QVBoxLayout()
        spacer = QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        vbox.addItem(spacer)
        self.form_layout.addRow(vbox)

    def on_remove_layer(self, layer_id):
        print("layer removed")
        print(layer_id)
        
        if self.map1 is not None and layer_id == self.map1.id():
            self.map1 = None
            self.label_select_1.setText("No map selected")
        if self.map2 is not None and layer_id == self.map2.id():
            self.map2 = None
            self.label_select_2.setText("No map selected")    
    
    def select_first_map(self):
        self.map1 = self.iface.activeLayer()
        if self.map1 is None:
            self.failed_message("No map selected")
            return
        self.label_select_1.setText("First map selected :\n{}".format(self.map1.name()))
        
        if self.map1 is not None and self.map2 is not None:
            self.add_common_columns()
        
    def select_second_map(self):
        self.map2 = self.iface.activeLayer()
        if self.map2 is None:
            self.failed_message("No map selected")
            return
        self.label_select_2.setText("Second map selected :\n{}".format(self.map2.name()))
        if self.map1 is not None and self.map2 is not None:
            self.add_common_columns()
        
    def failed_message(self, label):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText(label)
        msg.setWindowTitle("Failed")
        msg.exec_()
        
    def common_columns(self):
        layer1 = self.map1
        layer2 = self.map2
        fields1 = [field.name() for field in layer1.fields()]
        fields2 = [field.name() for field in layer2.fields()]

        common_fields = list(set(fields1) & set(fields2))

        return common_fields
    
    def add_common_columns(self):
        columns = self.common_columns()
        self.combo_box_map.clear()
        self.combo_box_compare.clear()
        
        self.combo_box_map.addItems(columns)
        self.combo_box_compare.addItems(columns)
        
    def compare(self):
        if self.map1 is None or self.map2 is None:
            self.failed_message("Select both maps")
            return
        if self.combo_box_map.currentText() == "" or self.combo_box_compare.currentText() == "":
            self.failed_message("Select columns")
            return
        
        self.select_common_features()
        self.generate_heatmap()
        
        
    def select_common_features(self):
        print("map 1 ",self.map1.name())
        print("map 2 ",self.map2.name())
        source = self.map1.source()
        params = dict(i.split('=') for i in source.split(' ') if '=' in i)
        print("Schema name of map1: ", params.get('schema'))
        self.map_column = self.combo_box_map.currentText()
        self.compare_column = self.combo_box_compare.currentText()
        self.common_features = []
        is_present = {}
        map_column = self.combo_box_map.currentText()
        compare_column = self.combo_box_compare.currentText()
        for feature in self.map1.getFeatures():
            is_present[feature[map_column]] = feature[compare_column]

        for feature in self.map2.getFeatures():
            if feature[map_column] in is_present:
                base_val = is_present[feature[map_column]]
                compare_val = feature[compare_column]
                self.common_features.append((feature, 100*((compare_val - base_val)/base_val)))
            else:
                self.common_features.append((feature, 10000000))
        
        print("number of common features : ", len(self.common_features))
        
        
    def generate_heatmap(self):
        colors = [(-100000, QColor('#ca0020')), (-5, QColor('#ec846e')), (-3, QColor('#f6d6c8')), (-1, QColor('#d3d3d3')), 
                (1, QColor('#cfe3ed')), (3, QColor('#76b4d5')), (5, QColor('#0571b0')), (100000, QColor('white'))]

        ranges = []
        for i in range(len(colors) - 1):
            lower_bound, lower_color = colors[i]
            upper_bound, upper_color = colors[i + 1]
            label = f'{lower_bound}% to {upper_bound}%'
            symbol = QgsSymbol.defaultSymbol(self.map2.geometryType())
            symbol.setColor(lower_color)
            range_item = QgsRendererRange(lower_bound, upper_bound, symbol, label)
            ranges.append(range_item)

        # Create the graduated renderer
        renderer = QgsGraduatedSymbolRenderer('', ranges)
        renderer.setMode(QgsGraduatedSymbolRenderer.Custom)
        renderer.setClassAttribute('value')

        # Create a temporary in-memory layer
        temp_layer = QgsVectorLayer(f'Polygon?crs={self.map2.crs().authid()}', f'{self.compare_column}_comparison_temp_layer', 'memory')
        temp_layer_data_provider = temp_layer.dataProvider()
        temp_layer.startEditing()
        temp_layer_data_provider.addAttributes(self.map2.fields().toList())
        temp_layer_data_provider.addAttributes([QgsField('value', QVariant.Double)])
        temp_layer.updateFields()

        # Copy features and add 'value' attribute
        for feature in self.common_features:
            new_feature = QgsFeature()
            new_feature.setGeometry(feature[0].geometry())
            new_feature.setAttributes(feature[0].attributes() + [feature[1]])
            temp_layer.addFeature(new_feature)
        
        temp_layer.commitChanges()

        # Apply the renderer to the temporary layer
        temp_layer.setRenderer(renderer)
        QgsProject.instance().addMapLayer(temp_layer)
        temp_layer.triggerRepaint()
